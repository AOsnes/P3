@page "/"
@using ChartJs.Blazor.LineChart
@using ChartJs.Blazor.PieChart
@using BlazorApp.Data
@using System.Globalization

@inject Test dataList;
@* @inject QueueTest managerList; *@

@* Font *@
<link href='https://fonts.googleapis.com/css?family=Roboto Slab' rel='stylesheet'>

@if (managers == null || managers.Count == 0 || 
     _lineconfig == null || 
     lineconfig_dataset_cpu == null || 
     lineconfig_dataset_memory == null || 
     _pieconfig_errors == null ||
     _pieconfig_reconciliations == null ||
     pieconfig_dataset_errors == null ||
     pieconfig_dataset_reconciliations == null ||
     healthdatatests == null ||
     _errorDataStorageList == null ||
     _ReconDataStorageList == null)
{
    <p>Loading ....</p>
}
else
{
    <div class="overview_container">
        <Summary></Summary>

        <div class="Overview-right">
            <HealthReport></HealthReport>
            <div class="efficiency-table-container">
                <EfficiencyTable></EfficiencyTable>
            </div>
        </div>
    </div>
}

@code{
    protected int managersCount = 0;
    bool calledOnce = false;
    protected LineConfig _lineconfig;
    LineDataset<long> lineconfig_dataset_cpu;
    LineDataset<long> lineconfig_dataset_memory;

    protected PieConfig _pieconfig_errors;
    protected PieConfig _pieconfig_reconciliations;
    protected PieDataset<int> pieconfig_dataset_errors = new ();
    protected PieDataset<int> pieconfig_dataset_reconciliations;

    protected List<HealthDataTest> healthdatatests = new List<HealthDataTest>();
    protected List<ManagerStatusHandler> managers = new List<ManagerStatusHandler>();
    protected List<LogData> _errorDataStorageList;
    protected List<LogData> _ReconDataStorageList;

    List<HealthData> _cpuDataList = new ();
    List<HealthData> _memDataList = new ();
    
    protected override async Task OnInitializedAsync()
    {
        managers = await Task.Run(() => ConversionDataAssigner.FinishedManagers);
        ConfigureLineConfig();
        ConfigurePieConfig();
     
        _errorDataStorageList = await Task.Run(() => ConversionDataAssigner.GetErrorLogList("error"));
        _ReconDataStorageList = await Task.Run(() => ConversionDataAssigner.GetErrorLogList("reconciliations"));
        
        // ArgumentNullException fix at page reload ********************************************************************
        _pieconfig_errors.Data.Datasets.Clear();
        pieconfig_dataset_errors = new PieDataset<int>(TotalErrorsSeverityCounter(managers))
        {
            BackgroundColor = new[] // Color for the pies 
            {
                ColorUtil.ColorHexString(255, 23, 0), //Fatal Error
                ColorUtil.ColorHexString(227, 95, 82), //Error
                ColorUtil.ColorHexString(221, 155, 43), //Warning
                ColorUtil.ColorHexString(92, 188, 169) //Info
            },
            BorderColor = ColorUtil.ColorHexString(0, 0, 0),
            BorderWidth = 0
        };
        _pieconfig_errors.Data.Datasets.Add(pieconfig_dataset_errors);
            
        _pieconfig_reconciliations.Data.Datasets.Clear();
        pieconfig_dataset_reconciliations = new PieDataset<int>(TotalReconTypeCounter(managers))
        {
            BackgroundColor = new[] // Color for the pies
            {
                ColorUtil.ColorHexString(255, 23, 0), //Mismatch
                ColorUtil.ColorHexString(227, 95, 82), //Failed
                ColorUtil.ColorHexString(221, 155, 43), //Disabled
                ColorUtil.ColorHexString(92, 188, 169) //OK
            },
            BorderColor = ColorUtil.ColorHexString(0, 0, 0),
            BorderWidth = 0,
        };
        _pieconfig_reconciliations.Data.Datasets.Add(pieconfig_dataset_reconciliations);
        // *************************************************************************************************************
        
        StateHasChanged();
        
        ReconUpdateTriggered += async (o, args) =>
        {
            _ReconDataStorageList.AddRange(args.ReconDataList);
            await InvokeAsync(StateHasChanged);
        };
        
        ErrorUpdateTriggered += async (o, args) =>
        {
            _errorDataStorageList.AddRange(args.LogDataList);
            await InvokeAsync(StateHasChanged);
        };

        UpdateOverviewTriggered += async (o, args) =>
        {
            managersCount++;
            _pieconfig_errors.Data.Datasets.Clear();
            pieconfig_dataset_errors = new PieDataset<int>(TotalErrorsSeverityCounter(managers))
            {
                BackgroundColor = new[] // Color for the pies 
                {
                    ColorUtil.ColorHexString(255, 23, 0), //Fatal Error
                    ColorUtil.ColorHexString(227, 95, 82), //Error
                    ColorUtil.ColorHexString(221, 155, 43), //Warning
                    ColorUtil.ColorHexString(92, 188, 169) //Info
                },
                BorderColor = ColorUtil.ColorHexString(0, 0, 0),
                BorderWidth = 0
            };
            _pieconfig_errors.Data.Datasets.Add(pieconfig_dataset_errors);
            
            _pieconfig_reconciliations.Data.Datasets.Clear();
            pieconfig_dataset_reconciliations = new PieDataset<int>(TotalReconTypeCounter(managers))
            {
                BackgroundColor = new[] // Color for the pies
                {
                    ColorUtil.ColorHexString(255, 23, 0), //Mismatch
                    ColorUtil.ColorHexString(227, 95, 82), //Failed
                    ColorUtil.ColorHexString(221, 155, 43), //Disabled
                    ColorUtil.ColorHexString(92, 188, 169) //OK
                },
                BorderColor = ColorUtil.ColorHexString(0, 0, 0),
                BorderWidth = 0,
            };
             _pieconfig_reconciliations.Data.Datasets.Add(pieconfig_dataset_reconciliations);
            
            
            // LINE CHART **********************************************************************************************
            _lineconfig.Data.Datasets.Clear();
            lineconfig_dataset_cpu = new LineDataset<long>(lineDataInputYaxisMem(_memDataList))
            {
                Label = "Cpu usage",
                BorderColor = ColorUtil.ColorHexString(227, 95, 82),
                BackgroundColor = ColorUtil.ColorString(0, 0, 0, 0.0),
                LineTension = 0,
            };
            _lineconfig.Data.Datasets.Add(lineconfig_dataset_memory);
            lineconfig_dataset_cpu = new LineDataset<long>(lineDataInputYaxisCpu(_cpuDataList))
            {
                Label = "Cpu usage",
                BorderColor = ColorUtil.ColorHexString(227, 95, 82),
                BackgroundColor = ColorUtil.ColorString(0, 0, 0, 0.0),
                LineTension = 0,
            };
            _lineconfig.Data.Datasets.Add(lineconfig_dataset_cpu);
            
            await InvokeAsync(StateHasChanged);
            


        };

        HealthUpdateTriggered += async (o, args) =>
        {
            if (args.Cpu != null) // IKKE NØDVENDIG
                 _cpuDataList?.AddRange(args.Cpu);
             if (args.Memory != null) // IKKE NØDVENDIG
                 _memDataList?.AddRange(args.Memory);


             //lineconfig_dataset_cpu.Clear();
            //lineconfig_dataset_cpu = new LineDataset<long>(lineDataInputYaxisCpu(args.Cpu))
            //{
            //    Label = "Cpu usage",
            //    BorderColor = ColorUtil.ColorHexString(227, 95, 82),
            //    BackgroundColor = ColorUtil.ColorString(0, 0, 0, 0.0),
            //    LineTension = 0,
            //};
            //_lineconfig.Data.Datasets.Add(lineconfig_dataset_cpu);
            
            // lineconfig_dataset_memory.Clear();
            // lineconfig_dataset_memory = new LineDataset<long>(lineDataInputYaxisMem(args.Memory)) //Needs data From health data memory class, like the data above
            // {
            //     Label = ("Memory usage"),
            //     BorderColor = ColorUtil.ColorString(92, 188, 169, 1),
            //     BackgroundColor = ColorUtil.ColorString(92, 188, 169, 0.3),
            //     LineTension = 0,
            // };
            // _lineconfig.Data.Datasets.Add(lineconfig_dataset_memory);
            await InvokeAsync(StateHasChanged);
        };

    }
}

@code{

    public LineDataset<long> lineDataInputYaxisCpu(List<HealthData> healthDataList)
    {
    //Takes data from test and stores in list - TODO: DELETE?
        string[] separtors = new string[] {" "};
        lineconfig_dataset_cpu.Clear();
        foreach (var data in healthDataList)
        {
            if (data.ReportType == "CPU")
            {
                lineconfig_dataset_cpu.Add(data.NumericValue); // Delete?
            }

        }
        _lineconfig.Data.Labels.Clear();
        foreach (var data in healthDataList)
        {
            if (data.ReportType == "CPU")
            {
                _lineconfig.Data.Labels.Add((data.LogTime.ToString().Split(separtors, 2, StringSplitOptions.RemoveEmptyEntries))[1]);
                
            }
        }
        return lineconfig_dataset_cpu;
    }
    
    public LineDataset<long> lineDataInputYaxisMem(List<HealthData> healthDataList)
    {
        lineconfig_dataset_memory.Clear();
        foreach (var data in healthDataList)
        {
            if (data.ReportType == "MEMORY")
                lineconfig_dataset_memory.Add(data.NumericValue/1024/1024/1024);
        }
        return lineconfig_dataset_memory;
    }
}


@code{
    protected void ConfigureLineConfig()
    {
        _lineconfig = new LineConfig();
        _lineconfig.Options = new LineOptions
        {
            Responsive = true,
            Title = new OptionsTitle
            {
                Display = false,
                Text = "Cpu & Memory usage",
                FontColor = "#FFFFFF"
            },
            Legend = new Legend
            {
                Position = Position.Bottom,
                Display = false,
            },
            Hover = new Hover
            {
                Mode = InteractionMode.Nearest,
                Intersect = true
            },
            Scales = new Scales
            {
                XAxes = new List<CartesianAxis> //scale for the x-axis
                {
                    new CategoryAxis
                    {
                        ScaleLabel = new ScaleLabel
                        {
                            Display = true,
                            //LabelString = "Time",
                            FontColor = "#FFFFFF",
                            FontSize = 15,
                        },
                        Ticks = new CategoryTicks
                        {
                            FontColor = "#FFFFFF",
                            FontSize = 13,
                        },
                        GridLines = new GridLines
                        {
                            Color = ColorUtil.ColorHexString(142, 142, 142),
                        }
                    },
                },
                YAxes = new List<CartesianAxis> //Scale for the y-axis
                {
                    new LinearCartesianAxis
                    {
                        ScaleLabel = new ScaleLabel
                        {
                            Display = true,
                            //LabelString = "Usage %",
                            FontColor = "#FFFFFF",
                            FontSize = 15,

                        },
                        Ticks = new LinearCartesianTicks
                        {
                            FontSize = 13,
                            Padding = 10,
                            FontColor = "#FFFFFF", //Colour for ticks, values on y-axis
                            BeginAtZero = true,
                            StepSize = 10,
                            Max = 100,
                        },
                        GridLines = new GridLines
                        {
                            Color = ColorUtil.ColorHexString(142, 142, 142),
                            DrawBorder = false, //Removes the border in the y-axis
                        },
                    }
                }
            }
        };
        lineconfig_dataset_cpu = new LineDataset<long>
        {
            Label = "Cpu usage",
            BorderColor = ColorUtil.ColorHexString(227, 95, 82),
            BackgroundColor = ColorUtil.ColorString(0, 0, 0, 0.0),
            LineTension = 0,
        };

        lineconfig_dataset_memory = new LineDataset<long> //Needs data From health data memory class, like the data above
        {
            Label = ("Memory usage"),
            BorderColor = ColorUtil.ColorString(92, 188, 169, 1),
            BackgroundColor = ColorUtil.ColorString(92, 188, 169, 0.3),
            LineTension = 0,
        };

    }

    private T SetUpPieLabels<T>(T config, string[] labels) where T : PieConfig
    {
        foreach (var label in labels)
        {
            config.Data.Labels.Add(label);
        }

        return config;
    }

}

@code{

    private void ConfigurePieConfig()
    {
        _pieconfig_errors = new PieConfig();
        _pieconfig_reconciliations = new PieConfig();

        _pieconfig_errors.Options = new PieOptions
        {
            Responsive = true,
            Title = new OptionsTitle
            {
                Display = false,
                Text = "Total Errors",
                FontColor = "#FFFFFF",
            },
            CutoutPercentage = 45,
            Legend = new Legend
            {
                Display = false,
            },
        };
        _pieconfig_reconciliations.Options = _pieconfig_errors.Options;

        _pieconfig_errors = SetUpPieLabels(_pieconfig_errors, new[] {"Fatal error", "Error", "Warning", "Info"});
        _pieconfig_reconciliations = SetUpPieLabels(_pieconfig_reconciliations, new[] {"Mismatch", "Failed", "Disabled", "OK"});
    }

}

@code
{
    protected int SelectedManager { get; set; }
    
    protected void GetSelectedManagerID(int selectedID)
    {
        
        SelectedManager = selectedID;
    }
    
    private int[] ErrorSeverityCounter(List<LogData> errors)
	{
		int[] counter = {0, 0, 0, 0};

		foreach(LogData error in errors)
		{
		    switch(error.Grade)
			{
				case "FATAL":
					counter[0]++;
				    break;

				case "ERROR":
					counter[1]++;
				break;

				case "WARN":
					counter[2]++;
				break;

				case "INFO":
				    counter[3]++;
				break;

				default:
					throw new ArgumentException($"{error.Grade} is not a valid argument");
			}
		}
        return counter;
	}
    
    private int[] TotalErrorsSeverityCounter(List<ManagerStatusHandler> managers)
    {
        int[] totalErrors = {0, 0, 0, 0};
        int[] counter = {0, 0, 0, 0};
        foreach (var manager in managers)
        {
            counter = ErrorSeverityCounter(manager.ErrorHandler.LogDataList);
             for (int i = 0; i < 4; i++)
             {
                 totalErrors[i] += counter[i];
             }
        }
        return totalErrors;
    }

    // NOT USED DELETE
    private int[] CurrentManagerErrorCounter(List<ManagerStatusHandler> managers)
    {
        int[] currentManagerError = {0,0,0,0};
        foreach (var manager in managers)
        {
            currentManagerError = ErrorSeverityCounter(manager.ErrorHandler.LogDataList);
        }
        return currentManagerError;
    }
    
    private int[] ReconTypeCounter(List<LogData> recons)
    {
        int[] counter = {0, 0, 0, 0};

        foreach(LogData recon in recons)
        {
            switch(recon.Grade)
            {
                case "FAIL MISMATCH":
                    counter[0]++;
                    break;

                case "FAILED":
                    counter[1]++;
                    break;

                case "DISABLED":
                    counter[2]++;
                    break;

                case "OK":
                    counter[3]++;
                    break;

                default:
                    throw new ArgumentException($"{recon} is not a valid argument");
            }
        }

        return counter;
    }

    private int[] TotalReconTypeCounter(List<ManagerStatusHandler> managers)
    {

        int[] totalRecons = {0, 0, 0, 0};
        int[] counter = {0, 0, 0, 0};

        foreach (var manager in managers)
        {
            counter = ReconTypeCounter(manager.ReconciliationHandler.LogDataList);
            for (int i = 0; i < 4; i++)
            {
                totalRecons[i] += counter[i];
            }
        }
        return totalRecons;
    }

    // TODO: only uses case "OK"
    protected string ManagerCircleColour(ManagerStatusHandler manager)
	{
		int[] errors = ErrorSeverityCounter(manager.ErrorHandler.LogDataList);
        int[] recons = ReconTypeCounter(manager.ReconciliationHandler.LogDataList);
        
        ManagerQueueCounterFixer();

        switch (manager.Status)
        {
            // "FINISHED" -> "OK"
            case "OK":
               ManagerQueueCounter[0]++;
               if(errors[0] > 0 || recons[0] > 0){
                   return "background-red";
               }
               else if(errors[1] > 0 || recons[1] > 0){
                   return "background-lightred";
               }
               else if(errors[2] > 0 || recons[2] > 0){
                   return "background-yellow";
               }
               else return "background-green";
               
            case "RUNNING": // BLIVER IKKE BRUGT?
                CurrentManager = manager;
                return "background-running";
            
            case "QUEUED": // BLIVER IKKE BRUGT?
                ManagerQueueCounter[1]++;
                return "background-queued";
            default:
                throw new ArgumentException($"{manager.Status} is not a valid manager status");
        }
		
	}
  	
	protected int HoveredManager {get; set;}
    protected int[] HoveredManagerErrors { get; set; }
    protected int[] HoveredManagerRecons { get; set; }
    protected double MousePositionX { get; set; }
    protected double MousePositionY { get; set; } 
    ManagerStatusHandler CurrentManager { get; set; }
    
    // NOT USED DELETE
    int[] ManagerQueueCounter { get; set; }
    
    
	protected void GetHoveredManager(int hovered, MouseEventArgs e, ManagerStatusHandler manager)
	{
		HoveredManager = hovered;
	    MousePositionX = e.ClientX;
	    MousePositionY = e.ClientY;
	    HoveredManagerErrors = ErrorSeverityCounter(manager.ErrorHandler.LogDataList);
	    HoveredManagerRecons = ReconTypeCounter(manager.ReconciliationHandler.LogDataList);
	}

    // NOT USED DELETE
    private void ManagerQueueCounterFixer()
    {
        int total = 0;
        if (ManagerQueueCounter == null)
        {
            ManagerQueueCounter = new[] {0, 0};
        }
        for (int i = 0; i < 2; i++)
        {
            total += ManagerQueueCounter[i];
        }
        if (total == managers.Count - 1)
        {
            ManagerQueueCounter = new[] {0, 0};
        }
    }
    
    // NOT USED DELETE
    private int ManagerQueueCounterWriter(string status)
    {
        if (ManagerQueueCounter == null)
        {
            ManagerQueueCounterFixer();
        }
        if (status == "FINISHED")
        {
            return ManagerQueueCounter[0];
        }
        else if (status == "QUEUED")
        {
            return ManagerQueueCounter[1];
        }
        else
        {
            throw new ArgumentException($"{status} is not a valid argument");
        }
    }

    protected string CalculateRuntime(ManagerStatusHandler manager)
    {
        string seconds = (manager.RunTime / 1000 % 60).ToString();
        
        string minutes = (((manager.RunTime / 1000) / 60) % 60).ToString();
        
        string hours = ((manager.RunTime / 1000) / 3600).ToString();

        if (seconds.Length < 2)
        {
            seconds = "0" + seconds;
        }
        if (minutes.Length < 2)
        {
            minutes = "0" + minutes;
        }
        if (hours.Length < 2)
        {
            hours = "0" + hours;
        }
        
        return hours + ':' + minutes + ':' + seconds;
    }
    
    // NOT USED DELETE
    private string CurrentManagerDetails(string wantedInfo)
    {
        if (CurrentManager == null)
        {
            return "0";
        }
        switch (wantedInfo)
        {
            case "managerName":
                return CurrentManager.Name;
            case "runtime":
                return CalculateRuntime(CurrentManager); 
            case "totalErrors":
                return CurrentManager.ErrorHandler.LogDataList.Count.ToString();
            case "FATAL":
                return ErrorSeverityCounter(CurrentManager.ErrorHandler.LogDataList)[0].ToString();
            case "ERROR":
                return ErrorSeverityCounter(CurrentManager.ErrorHandler.LogDataList)[1].ToString();
            case "WARNING":
                return ErrorSeverityCounter(CurrentManager.ErrorHandler.LogDataList)[2].ToString();
            case "INFO":
                return ErrorSeverityCounter(CurrentManager.ErrorHandler.LogDataList)[3].ToString();
            case "totalRecons":
                return CurrentManager.ReconciliationHandler.LogDataList.Count.ToString();
            case "MISMATCH":
                return ReconTypeCounter(CurrentManager.ReconciliationHandler.LogDataList)[0].ToString();
            case "FAILED":
                return ReconTypeCounter(CurrentManager.ReconciliationHandler.LogDataList)[1].ToString();
            case "DISABLED":
                return ReconTypeCounter(CurrentManager.ReconciliationHandler.LogDataList)[2].ToString();
            case "OK":
                return ReconTypeCounter(CurrentManager.ReconciliationHandler.LogDataList)[3].ToString();
            default:
                throw new ArgumentException($"{wantedInfo} is not a valid argument");
        }
    }
    
    // NOT USED DELETE
    private int[] CurrentManagerReconCounter(List<ManagerStatusHandler> managers)
    {
        int[] currentManagerRecons = {0,0,0,0};
        foreach (var manager in managers)
        {
            currentManagerRecons = ReconTypeCounter(manager.ReconciliationHandler.LogDataList);
        }
        return currentManagerRecons;
    }


}


