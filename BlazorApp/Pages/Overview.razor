@page "/"
@page "/overview"
@using ChartJs.Blazor.LineChart
@using ChartJs.Blazor.PieChart
@using System.Reflection.Emit
<link href='https://fonts.googleapis.com/css?family=Roboto Slab' rel='stylesheet'>


<div class="summary_container">
    
    @* Summary text + runtime *@
    <div class="summary_caption_container" style="text-align: center;">Summary</div>
    
    @* Current running manager info *@
    <div class="Current_manager_info_container">
        <div>Current manager: DepartmentManager</div><br>
        <div>Manager Runtime: 00:06:51</div>
    </div>
    
    <div class="Current_manager_container">
        <div class="Current_manager_errors">Current manager errors: 17
            <ul class="error-reconciliation-formatting">
                <div class="circle-red"></div><li>Fatal: 0</li>
                <div class="circle-lightred"></div><li>Error: 2</li>
                <div class="circle-yellow"></div><li>Warning: 5</li>
                <div class="circle-green"></div><li>Info: 10</li>
            </ul>
        </div>
        <div class="Current_manager_reconciliations">Current manager reconciliations: 691
            <ul class="error-reconciliation-formatting">
                <div class="circle-red"></div><li>Mismatch: 1</li>
                <div class="circle-lightred"></div><li>Failed: 2</li>
                <div class="circle-yellow"></div><li>Disabled: 8</li>
                <div class="circle-green"></div><li>OK: 60</li>
            </ul>
        </div>
    </div>
    <div class="mind-the-gap">&nbsp;</div> @* Div added to make Might need to add &nbsp; *@
    
    @* Manager queue *@
    <div class="manager-queue-container">
        <div class="queue-finished-text">Finished: <b>8</b></div>
        <div class="queue-inqueue-text">In queue: <b>4</b></div>
    </div>
    
    @* Total manager info *@
    <div class="Total_errors_and_reconciliations_container">
        <div class="info_total_errors">Total Errors: 66
            <ul class="error-reconciliation-formatting">
                <div class="circle-red"></div><li>Fatal: 1</li>
                <div class="circle-lightred"></div><li>Error: 10</li>
                <div class="circle-yellow"></div><li>Warning: 15</li>
                <div class="circle-green"></div><li>Info: 63</li>
            </ul>
        </div>
        <div class="PieConfigTotalErrors">
            <Chart Config="_pieconfigTotalErrors" Height="50" Width="50"></Chart>
        </div>

        <div class="info_total_reconciliations">Total Reconciliations: 691
            <ul class="error-reconciliation-formatting">
                <div class="circle-red"></div><li>Mismatch: 5</li>
                <div class="circle-lightred"></div><li>Failed: 10</li>
                <div class="circle-yellow"></div><li>Disabled: 15</li>
                <div class="circle-green"></div><li>OK: 661</li>
            </ul>
        </div>
        <div class="pieConfigTotalReconciliations">
            <Chart Config="_pieconfigTotalReconciliations" Height="50" Width="50"></Chart>
        </div>
    </div>
    
    @* Efficiency score table summary *@
    <div class="efficiency-container">
        <div class="efficiency-text">Median efficiency score: <b>2702</b></div><br/>
        <div class="efficiency-text">Total read: <b>17021044</b></div><br/>
        <div class="efficiency-text">Total written: <b>30461662</b></div>
    </div>
</div>












<div class="Overview-right">
    <div class="cpu_usage" style="text-align: center "> Memory/CPU
        <div style="position: relative; width: 90%; left: 5%">
            <Chart Config="_lineconfig" ></Chart>
        </div>
        <div class="info-labels">
            <div class="cpu_info">CPU</div>
            <div class="memory_info">Memory</div>
        </div>
    </div>
    <div class="efficiency">
        
    </div>
</div>




@code{
    private LineConfig _lineconfig;
    private PieConfig _pieconfigTotalErrors;
    private PieConfig _pieconfigTotalReconciliations;

    protected override void OnInitialized()
    {
        ConfigureLineConfig();
        ConfigurePieConfig();
    }

    private void ConfigureLineConfig()
    {
        _lineconfig = new LineConfig();
        _lineconfig.Options = new LineOptions
        {
            Responsive = true,
            Title = new OptionsTitle
            {
                Display = false,
                Text = "Cpu & Memory usage",
                FontColor = "#FFFFFF"
            },
            Legend = new Legend
            {
                Position = Position.Bottom,
                Display = false,
            },
            Hover = new Hover
            {
                Mode = InteractionMode.Nearest,
                Intersect = true
            },
            Scales = new Scales
            {
                XAxes = new List<CartesianAxis> //scale for the x axes
                {
                    new CategoryAxis
                    {
                        ScaleLabel = new ScaleLabel
                        {   
                            Display = true,
                            //LabelString = "Time",
                            FontColor = "#FFFFFF",
                            FontSize = 15,
                        },
                        Ticks = new CategoryTicks
                        {
                            FontColor = "#FFFFFF",
                            FontSize = 13,
                        },
                        GridLines = new GridLines
                        {
                            Color = ColorUtil.ColorHexString(142,142,142),
                        },
                    },
                },
                YAxes = new List<CartesianAxis>  // scale for the y axes
                {
                    new LinearCartesianAxis
                    {
                        ScaleLabel = new ScaleLabel   
                        {
                            Display = true,
                            //LabelString = "Usage %",
                            FontColor = "#FFFFFF",
                            FontSize = 15,
                        },
                        Ticks = new LinearCartesianTicks
                        {
                            FontSize = 13,
                            Padding = 10,
                            FontColor = "#FFFFFF", // Color for ticks, values on y axies
                        },
                        GridLines = new GridLines
                        {
                            Color = ColorUtil.ColorHexString(142,142,142),
                            DrawBorder = false, // removes the border in the y axies
                            
                        }
                    }
                }
            }
        };
        
        var lineconfigdataset1 = new LineDataset<int>(new[]{70,90,87,100,87,100,70,40,70,43, 20, 10})
        {
            Label = "Cpu usage",
            BorderColor = ColorUtil.ColorHexString(227,95,82),
            BackgroundColor = ColorUtil.ColorString(0,0,0,0.0),
            LineTension = 0,

        };
        var lineconfigdataset2 = new LineDataset<int>(new[] {2,5,8,2,6,47,32,5,9,12, 20, 30 })
        {
            Label = ("Memory usage"),
            BorderColor = ColorUtil.ColorString(92,188,169,1),
            BackgroundColor = ColorUtil.ColorString(92,188,169,0.3),
            LineTension = 0,
            

        };
        foreach (var party in new[]{"01:02","","01:05","","01:05","","01:12","","01:17", "01:25", "01:30"})
        {
            _lineconfig.Data.Labels.Add(party);
        }
        _lineconfig.Data.Datasets.Add(lineconfigdataset1);
        _lineconfig.Data.Datasets.Add(lineconfigdataset2);
    }
    private T SetUpPieLabels<T>(T config, string[] labels) where T : PieConfig
    {
        foreach (var label in labels)
        {
            config.Data.Labels.Add(label);
        }
        
        return config;
    }

    private void ConfigurePieConfig()
    {
        _pieconfigTotalErrors = new PieConfig();
        _pieconfigTotalReconciliations = new PieConfig();

        _pieconfigTotalErrors.Options = new PieOptions
        {
            Responsive = true,
            Title = new OptionsTitle
            {
                Display = false,
                Text = "Total Errors",
                FontColor = "#FFFFFF",
            },
            CutoutPercentage = 45,
            Legend =new Legend
            {
                Display = false,
            },
        };
        _pieconfigTotalReconciliations.Options = _pieconfigTotalErrors.Options;
        
        _pieconfigTotalErrors = SetUpPieLabels(_pieconfigTotalErrors, new[] {"Fatal error","Error","Warning","Info"});
        _pieconfigTotalReconciliations = SetUpPieLabels(_pieconfigTotalReconciliations, new[] {"Mismatch","Failed","Disabled", "OK"});
        
        var pieconfigTotalErrorsData = new PieDataset<int>(new[] {1,15,20,30 }) //Datapoints
        {
            BackgroundColor = new[]   // Color for the pies
            {
                ColorUtil.ColorHexString(255, 23, 0), //Fatal Error
                ColorUtil.ColorHexString(227, 95, 82), //Error
                ColorUtil.ColorHexString(221, 155, 43), //Warning
                ColorUtil.ColorHexString(92, 188, 169)  //Info
            },
            BorderColor = ColorUtil.ColorHexString(0,0,0), 
            BorderWidth = 0,
        };
        
        var pieconfigTotalReconciliationsData = new PieDataset<int>(new[] {5,10,15,661 }){
            BackgroundColor = new[]   // Color for the pies
            {
                ColorUtil.ColorHexString(255, 23, 0), //Mismatch
                ColorUtil.ColorHexString(227, 95, 82), //Failed
                ColorUtil.ColorHexString(221, 155, 43), //Disabled
                ColorUtil.ColorHexString(92, 188, 169)  //OK
            },
            BorderColor = ColorUtil.ColorHexString(0,0,0), 
            BorderWidth = 0,
        };
        
        _pieconfigTotalErrors.Data.Datasets.Add(pieconfigTotalErrorsData);
        _pieconfigTotalReconciliations.Data.Datasets.Add(pieconfigTotalReconciliationsData);
    }
}
