@page "/DEMO"

<h3>DEMO</h3>

<div class="bg-gray-50">
    <div class="mx-auto py-12 px-4">
        <div class="mt-8 flex">
            <button class="bg-gray-500 hover:bg-purple-600 p-4 shadow-md rounded-md text-white m-10" @onclick="ManuelReset">
                @reset
            </button>
            <button class="bg-gray-500 hover:bg-red-600 p-4 shadow-md rounded-md text-white m-10" @onclick="ManuelTrigger">
                @trigger
            </button>
        </div>
    </div>
</div>

<div>
    <H1>HealthData:</H1> @if (_updateHealthData != null)
                    {
                        <h3>
                            CPU Count: @_updateHealthData.Cpu.Count <br>
                            Memory Count: @_updateHealthData.Memory.Count
                        </h3>
                    }
    
    <H1>LogData:</H1> @if (_updateLogData != null)
                   {
                       <h3>
                           LogDatalist Count: @_updateLogData.LogDataList.Count <br>
                           Manager name: @_updateLogData.LogDataList.OrderByDescending(data => data.Timestamp).First().ManagerName <br>
                           Description: @_updateLogData.LogDataList.OrderByDescending(data => data.Timestamp).First().Description <br>
                           Grade: @_updateLogData.LogDataList.OrderByDescending(data => data.Timestamp).First().Grade <br>
                           Timestamp: @_updateLogData.LogDataList.OrderByDescending(data => data.Timestamp).First().Timestamp
                       </h3>
                   }
</div>

@code{
    //string reset = "ResetUpdate";
    //string trigger = "TriggerUpdate";
    string reset = "ResetUpdate";
    string trigger = "TriggerUpdate";
    void ManuelReset()
    {
        reset = "Resat";
        trigger = "TriggerUpdate";
        ResetUpdate("Resat");
    }

    void ManuelTrigger()
    {
        trigger = "Triggered";
        reset = "ResetUpdate";
        //TriggerUpdate("Triggered");
    }
}

@* ------------- Event subscriber ------------- *@
@code
{
    HealthDataEventsArgs _updateHealthData;
    LogDataEventArgs _updateLogData;
    
    protected override async Task OnInitializedAsync()
    {
        UpdateTriggered += async (o, args) =>
        {
            _updateHealthData = args;
            await InvokeAsync(StateHasChanged);
        };

        UpdateResseted += async (a, args) =>
        {
            _updateHealthData = null;
            await  InvokeAsync(StateHasChanged);
        };
        
        LogUpdateTriggered += async (o, args) =>
        {
            _updateLogData = args;
            await InvokeAsync(StateHasChanged);
        };

        LogUpdateResseted += async (o, args) =>
        {
            _updateLogData = null;
            await InvokeAsync(StateHasChanged);
        };
    }


    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        return base.OnAfterRenderAsync(firstRender);
    }
}