@page "/TailwindDemo"

<h3>TailwindDemo</h3>

<div class="bg-gray-50">
    <div class="mx-auto py-12 px-4">
        <div class="mt-8 flex">
            <button class="bg-gray-500 hover:bg-purple-600 p-4 shadow-md rounded-md text-white m-10" @onclick="Test">
                @download
            </button>
            <button class="bg-gray-500 hover:bg-red-600 p-4 shadow-md rounded-md text-white m-10">
                Visit
            </button>
        </div>
    </div>
</div>

@code{
    string download = "Download";
    void Test()
    {
        download = "Reset";
        ResetUpdate("Reset");
    }
}

@if (_update != null)
{
      <div>
      @_update.Date @_update.Message
      </div>
}
<div>
    <H1>EVENT: @if (_update != null)
              {
                  <div>
                  @_update.Date @_update.Message
                  </div>
              }
    </H1>
</div>
<div class="rounded-t-xl overflow-hidden bg-gradient-to-r from-emerald-50 to-teal-100 p-10">
    <p class="px-4 py-2 text-emerald-600">Median efficiency score: <span class="font-weight-bold"> 2702</span> </p>
    <p class="px-4 py-2 text-emerald-600">Total read: <span class="font-weight-bold"> 17021044 </span> </p>
    <p class="px-4 py-2 text-emerald-600">Total written: <span class="font-weight-bold"> 30461662 </span> </p>
  <table class="table-auto">
    <thead>
    <tr>
      <th class="px-4 py-2 text-emerald-600">MANAGER</th>
      <th class="px-4 py-2 text-emerald-600">SCORE</th>
      <th class="px-4 py-2 text-emerald-600">ENDTIME</th>
      <th class="px-4 py-2 text-emerald-600">READ</th>
      <th class="px-4 py-2 text-emerald-600">WRITTEN</th>
      <th class="px-4 py-2 text-emerald-600">TIME (ms)</th>
    </tr>
    </thead>
    <tbody>
    <tr>
      <td class="border border-emerald-500 px-4 py-2 text-emerald-600 font-medium">EmployeesManager</td>
      <td class="border border-emerald-500 px-4 py-2 text-emerald-600 font-medium">0</td>
      <td class="border border-emerald-500 px-4 py-2 text-emerald-600 font-medium">2021-05-15 02:29:34.250</td>
      <td class="border border-emerald-500 px-4 py-2 text-emerald-600 font-medium">0</td>
      <td class="border border-emerald-500 px-4 py-2 text-emerald-600 font-medium">0</td>
      <td class="border border-emerald-500 px-4 py-2 text-emerald-600 font-medium">5342</td>

    </tr>
    <tr class="bg-emerald-200">
      <td class="border border-emerald-500 px-4 py-2 text-emerald-600 font-medium">MembershipManager</td>
      <td class="border border-emerald-500 px-4 py-2 text-emerald-600 font-medium">0</td>
      <td class="border border-emerald-500 px-4 py-2 text-emerald-600 font-medium">2021-05-15 02:45:56.728</td>
      <td class="border border-emerald-500 px-4 py-2 text-emerald-600 font-medium">0</td>
      <td class="border border-emerald-500 px-4 py-2 text-emerald-600 font-medium">0</td>
      <td class="border border-emerald-500 px-4 py-2 text-emerald-600 font-medium">4534</td>

    </tr>
    <tr>
      <td class="border border-emerald-500 px-4 py-2 text-emerald-600 font-medium">PostAdministrationsRelationManager</td>
      <td class="border border-emerald-500 px-4 py-2 text-emerald-600 font-medium">13</td>
      <td class="border border-emerald-500 px-4 py-2 text-emerald-600 font-medium">2021-05-15 02:36:42.121</td>
      <td class="border border-emerald-500 px-4 py-2 text-emerald-600 font-medium">2</td>
      <td class="border border-emerald-500 px-4 py-2 text-emerald-600 font-medium">4</td>
      <td class="border border-emerald-500 px-4 py-2 text-emerald-600 font-medium">2300</td>
    </tr>
    </tbody>
  </table>
</div>

@* ------------- Event subscriber ------------- *@
@code
{
    UpdateEventArgs _update;
    protected override async Task OnInitializedAsync()
    {
        UpdateTriggered += async (o, args) =>
        {
            _update = args;
            _update.Message = "Display Time";
            await InvokeAsync( StateHasChanged);
        };
        
        UpdateResseted += async (a, args) =>
        {
            _update = null;
            await  InvokeAsync(StateHasChanged);
        };
    }
    
    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        return base.OnAfterRenderAsync(firstRender);
    }
}