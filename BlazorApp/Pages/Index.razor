@page "/"
@using ChartJs.Blazor.LineChart
@using ChartJs.Blazor.PieChart
@using System.Reflection.Emit


<div class="summary">
    <h1><div class="summary_caption" style="text-align: center;">Summary</div></h1>
    <Chart Config="_pieconfig"></Chart>
    
</div>

<div class="cpu_usage" style="text-align: center ">CPU Usage
    <Chart Config="_lineconfig" Height="135" ></Chart>
    <h1></h1>
</div>



@code{
    private LineConfig _lineconfig;
    private PieConfig _pieconfig;

    protected override void OnInitialized()
    {
        ConfigureLineConfig();
        ConfigurePieConfig();
    }

    private void ConfigureLineConfig()
    {
        _lineconfig = new LineConfig();

        _lineconfig.Options = new LineOptions
        {
            Responsive = true,
            Title = new OptionsTitle
            {
                Display = true,
                Text = "Cpu & RAM usage",
                FontColor = "#FFFFFF"
            },
            Hover = new Hover
            {
                Mode = InteractionMode.Nearest,
                Intersect = true
            },
            Scales = new Scales
            {
                XAxes = new List<CartesianAxis> //scale for the x axes
                {
                    new CategoryAxis
                    {
                        ScaleLabel = new ScaleLabel
                        {   
                            Display = true,
                            LabelString = "Time",
                            FontColor = "#FFFFFF",
                            FontSize = 15,
                        },
                        Ticks = new CategoryTicks
                        {
                            FontColor = "#FFFFFF",
                            FontSize = 13,
                        },
                        GridLines = new GridLines
                        {
                            Color = ColorUtil.ColorHexString(142,142,142),
                        }
                    }
                },
                YAxes = new List<CartesianAxis>  // scale for the y axes
                {
                    new LinearCartesianAxis
                    {
                        ScaleLabel = new ScaleLabel   
                        {
                            Display = true,
                            LabelString = "Usage %",
                            FontColor = "#FFFFFF",
                            FontSize = 15,
                        },
                        Ticks = new LinearCartesianTicks
                        {
                            FontSize = 13,
                            Padding = 10,
                            FontColor = "#FFFFFF", // Color for ticks, values on y axies
                        },
                        GridLines = new GridLines
                        {
                            Color = ColorUtil.ColorHexString(142,142,142),
                            DrawBorder = false, // removes the border in the y axies
                            
                        }
                    }
                }
            }
        };
        
        var lineconfigdataset1 = new LineDataset<int>(new[] {35, 50, 15, 45, 37})
        {
            Label = "Cpu usage",
            //BackgroundColor = ColorUtil.ColorHexString
            BorderColor = ColorUtil.ColorHexString(227,95,82),
            
        };

        var lineconfigdataset2 = new LineDataset<int>(new[] {10, 30, 1, 10, 20})
        {
            Label = "Ram usage",
    //BackgroundColor = ColorUtil.ColorHexString
            BorderColor = ColorUtil.ColorHexString(92, 188, 169),
            BackgroundColor = ColorUtil.ColorHexString(92,188,169), // ADD GRADIANT HERE!!!
            
        };
        
        _lineconfig.Data.Datasets.Add(lineconfigdataset1);
        _lineconfig.Data.Datasets.Add(lineconfigdataset2);
        

    }
    
    private void ConfigurePieConfig()
    {

        
        
        _pieconfig = new PieConfig();


        _pieconfig.Options = new PieOptions
        {
            Responsive = true,
            Title = new OptionsTitle
            {
                Display = true,
                Text = "Total Errors",
                FontColor = "#FFFFFF",
            },
            
        };
        

        foreach (var party in new[]{"Fatal error","Error","Warning","Info"})
        {
            
            _pieconfig.Data.Labels.Add(party);
        }

        var pieconfigdataset = new PieDataset<int>(new[] {20,10,10,60 }) //Datapoints
        {
            BackgroundColor = new[]   // Color for the pies
            {
                ColorUtil.ColorHexString(255, 23, 0), //Fatal Error
                ColorUtil.ColorHexString(227, 95, 82), //Error
                ColorUtil.ColorHexString(221, 155, 43), //Warning
                ColorUtil.ColorHexString(92, 188, 169)  //Info
                    
            },


        };
        _pieconfig.Data.Datasets.Add(pieconfigdataset);

    }
}
