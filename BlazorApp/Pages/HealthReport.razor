@using ChartJs.Blazor.PieChart
@using BlazorApp.Data
@using System.Globalization
@using ChartJs.Blazor.LineChart
@using BlazorApp
@* @inherits Overview *@

<link href='https://fonts.googleapis.com/css?family=Roboto Slab' rel='stylesheet'> 

@code{
    [Parameter] public List<ManagerStatusHandler> Managers { get; set; }
    
    List<HealthData> _cpuDataList = new ();
    List<HealthData> _memDataList = new ();
    LineDataset<long> lineconfig_dataset_cpu;
    LineDataset<long> lineconfig_dataset_memory;
    LineConfig _lineconfig;
    
    //private List<ManagerStatusHandler> managers = new List<ManagerStatusHandler>();
    
    protected override async Task OnInitializedAsync()
    {
        // managers = await Task.Run(() => ConversionDataAssigner.FinishedManagers);
        ConfigureLineConfig();
        
        StateHasChanged();
        HealthUpdateTriggered += async (o, args) =>
        {
            if (args.Cpu != null) // IKKE NØDVENDIG
                _cpuDataList?.AddRange(args.Cpu);
            if (args.Memory != null) // IKKE NØDVENDIG
                _memDataList?.AddRange(args.Memory);
            
            await InvokeAsync(StateHasChanged);
        };

        UpdateOverviewTriggered += async (o, args) =>
        {
            Console.WriteLine("UpdateOverviewTriggered *** HealthReport");
            _lineconfig.Data.Datasets.Clear();
            lineconfig_dataset_cpu = new LineDataset<long>(lineDataInputYaxisMem(_memDataList))
            {
                Label = "Cpu usage",
                BorderColor = ColorUtil.ColorHexString(227, 95, 82),
                BackgroundColor = ColorUtil.ColorString(0, 0, 0, 0.0),
                LineTension = 0,
            };
            _lineconfig.Data.Datasets.Add(lineconfig_dataset_memory);
            lineconfig_dataset_cpu = new LineDataset<long>(lineDataInputYaxisCpu(_cpuDataList))
            {
                Label = "Cpu usage",
                BorderColor = ColorUtil.ColorHexString(227, 95, 82),
                BackgroundColor = ColorUtil.ColorString(0, 0, 0, 0.0),
                LineTension = 0,
            };
            _lineconfig.Data.Datasets.Add(lineconfig_dataset_cpu);

            await InvokeAsync(StateHasChanged);
        };
    }
    
    public LineDataset<long> lineDataInputYaxisCpu(List<HealthData> healthDataList)
    {
    //Takes data from test and stores in list - TODO: DELETE?
        string[] separtors = new string[] {" "};
        lineconfig_dataset_cpu.Clear();
        foreach (var data in healthDataList)
        {
            if (data.ReportType == "CPU")
            {
                lineconfig_dataset_cpu.Add(data.NumericValue); // Delete?
            }
    
        }
        _lineconfig.Data.Labels.Clear();
        foreach (var data in healthDataList)
        {
            if (data.ReportType == "CPU")
            {
                _lineconfig.Data.Labels.Add((data.LogTime.ToString().Split(separtors, 2, StringSplitOptions.RemoveEmptyEntries))[1]);
                
            }
        }
        return lineconfig_dataset_cpu;
    }
    
    public LineDataset<long> lineDataInputYaxisMem(List<HealthData> healthDataList)
    {
        lineconfig_dataset_memory.Clear();
        foreach (var data in healthDataList)
        {
            if (data.ReportType == "MEMORY")
                lineconfig_dataset_memory.Add(data.NumericValue/1024/1024/1024);
        }
        return lineconfig_dataset_memory;
    }
    
    protected void ConfigureLineConfig()
    {
        _lineconfig = new LineConfig();
        _lineconfig.Options = new LineOptions
        {
            Responsive = true,
            Title = new OptionsTitle
            {
                Display = false,
                Text = "Cpu & Memory usage",
                FontColor = "#FFFFFF"
            },
            Legend = new Legend
            {
                Position = Position.Bottom,
                Display = false,
            },
            Hover = new Hover
            {
                Mode = InteractionMode.Nearest,
                Intersect = true
            },
            Scales = new Scales
            {
                XAxes = new List<CartesianAxis> //scale for the x-axis
                {
                    new CategoryAxis
                    {
                        ScaleLabel = new ScaleLabel
                        {
                            Display = true,
                            //LabelString = "Time",
                            FontColor = "#FFFFFF",
                            FontSize = 15,
                        },
                        Ticks = new CategoryTicks
                        {
                            FontColor = "#FFFFFF",
                            FontSize = 13,
                        },
                        GridLines = new GridLines
                        {
                            Color = ColorUtil.ColorHexString(142, 142, 142),
                        }
                    },
                },
                YAxes = new List<CartesianAxis> //Scale for the y-axis
                {
                    new LinearCartesianAxis
                    {
                        ScaleLabel = new ScaleLabel
                        {
                            Display = true,
                            //LabelString = "Usage %",
                            FontColor = "#FFFFFF",
                            FontSize = 15,
    
                        },
                        Ticks = new LinearCartesianTicks
                        {
                            FontSize = 13,
                            Padding = 10,
                            FontColor = "#FFFFFF", //Colour for ticks, values on y-axis
                            BeginAtZero = true,
                            StepSize = 10,
                            Max = 100,
                        },
                        GridLines = new GridLines
                        {
                            Color = ColorUtil.ColorHexString(142, 142, 142),
                            DrawBorder = false, //Removes the border in the y-axis
                        },
                    }
                }
            }
        };
        lineconfig_dataset_cpu = new LineDataset<long>
        {
            Label = "Cpu usage",
            BorderColor = ColorUtil.ColorHexString(227, 95, 82),
            BackgroundColor = ColorUtil.ColorString(0, 0, 0, 0.0),
            LineTension = 0,
        };

        lineconfig_dataset_memory = new LineDataset<long> //Needs data From health data memory class, like the data above
        {
            Label = ("Memory usage"),
            BorderColor = ColorUtil.ColorString(92, 188, 169, 1),
            BackgroundColor = ColorUtil.ColorString(92, 188, 169, 0.3),
            LineTension = 0,
        };

    }
    
    private int SelectedManager { get; set; }
    private void GetSelectedManagerID(int selectedID)
    {
        SelectedManager = selectedID;
    }

}

@if (Managers == null || Managers.Count == 0)
{
    <p>Loading ..HealthReport @Managers.Count..</p>
}
else 
{
    <div class="cpu_usage">
        <div class="chart-header">
            <div class="dropdown">
                <b class="selected-manager-name" title="">@(SelectedManager + "-" + Managers[SelectedManager].Name)</b>
                <img src="Icons/dropdown-arrow.svg" alt="dropdown-arrow" class="dropdown-arrow"/>
                <img src="Icons/dropup-arrow.svg" alt="dropup-arrow" class="dropup-arrow"/>
                <div class="dropdown-content">
                    @for (int i = 0, j = 0; i < Managers.Count; i++) //id does not do anything as of right now, but might be useful later on
                    {
                        int managerID = i;
                        if (i == SelectedManager)
                        {
                            continue;
                        }
                        else if (j == 0)
                        {
                            j++;
                            <div class="dropdown-content-first" title="@Managers[managerID].Name" id="@managerID" @onclick="@(() => GetSelectedManagerID(managerID))">@(managerID + "-" + Managers[managerID].Name)</div>
                            continue;
                        }
                        <div title="@Managers[managerID].Name" id="@managerID" @onclick="@(() => GetSelectedManagerID(managerID))">@(managerID + "-" + Managers[managerID].Name)</div>
                    }
                </div>
            </div>
            <div class="chart-title">
                Memory/CPU
            </div>
        </div>
        <div style="position: relative; width: 90%; left: 5%">
            <Chart Config="_lineconfig"></Chart>
        </div>
        <div class="info-labels">
            <div class="oblong background-lightred"></div>
            <div class="cpu_text">CPU</div>
            <div class="oblong background-green"></div>
            <div class="memory_text">Memory</div>
        </div>
    </div>
}